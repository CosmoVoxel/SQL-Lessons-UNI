########################################Proste zapytania###############################################################
--1
Select * From zespoly ORder by id_zesp;

--2
SELECT * FROM pracownicy ORDER by id_prac;

--3
SELECT nazwisko,placa_pod*12 As praca_roczna FROM pracownicy Order by NAZWISKO;

--4
SELECT nazwisko,etat,NVL(placa_dod,0)+NVL(placa_pod,0) AS Miesieczne FROM pracownicy;

--5
SELECT * FROM zespoly ORDER by nazwa;

--6
SELECT DISTINCT ETAT FROM pracownicy ORDER by ETAT;

--7
SELECT * FROM pracownicy Where etat = 'ASYSTENT' ORDER by nazwisko;

--8
SELECT id_prac , nazwisko,etat, placa_pod,id_zesp FROM pracownicy Where id_zesp = 40 or id_zesp=30 ORDER BY PLACA_POD DESC;

--9
SELECT nazwisko, id_zesp, placa_pod FROM pracownicy Where placa_pod BETWEEN 300 and 800 Order by nazwisko;

--10
SELECT NAZWISKO,ETAT,ID_ZESP from pracownicy Where nazwisko Like '%SKI' Order by nazwisko;

--11
SELECT ID_PRAC,ID_SZEFA,NAZWISKO,PLACA_POD from pracownicy Where placa_pod>1000 and ID_SZEFA IS NOT NULL;

--12
SELECT NAZWISKO,ID_ZESP from pracownicy Where id_zesp = 20 and (nazwisko Like 'M%' or nazwisko Like '%SKI');

--13
SELECT nazwisko, etat,placa_pod/160 AS STAWKA 
FROM pracownicy 
Where placa_pod NOT BETWEEN 400 AND 800 AND NOT (ETAT = 'STAZYSTA' OR ETAT = 'ADIUNKT') 
ORDER BY STAWKA; 

--14
Select nazwisko,etat,placa_pod,placa_dod from pracownicy Where (placa_pod) > 1000 Order by etat,NAZWISKO;

--15
SELECT nazwisko || ' PRACUJE OD ' || ZATRUDNIONY|| 'I ZARABIA '|| PLACA_POD AS PROF from pracownicy WHERE ETAT='PROFESOR' ORDER BY PLACA_POD DESC;




################################################Zaawansowana selekcja danych##########################################################################################


--1.
SELECT NAZWISKO,SUBSTR(ETAT,0,2)||ID_PRAC AS KOD FROM PRACOWNICY;

--2
SELECT NAZWISKO,TRANSLATE(NAZWISKO,'KLM','XXX') FROM PRACOWNICY;

--3
SELECT NAZWISKO FROM PRACOWNICY WHERE INSTR(SUBSTR(NAZWISKO,0,LENGTH(NAZWISKO)/2),'L',1)>0;

--4
SELECT NAZWISKO,ROUND(PLACA_POD*1.15) FROM PRACOWNICY;

--5
SELECT NAZWISKO,PLACA_POD,PLACA_POD*0.2 AS INWESTYCJA FROM PRACOWNICY;

--6
SELECT NAZWISKO,ZATRUDNIONY,FLOOR((DATE '2000-01-01'-ZATRUDNIONY)/365) AS STAZ FROM PRACOWNICY;

--7
SELECT NAZWISKO,TO_CHAR(ZATRUDNIONY,'') FROM PRACOWNICY WHERE  ID_ZESP=20;

--8
SELECT NAZWISKO , TO_CHAR(ZATRUDNIONY,'MON , D, YYYY') AS DATA_ZATRUDNIENIA FROM PRACOWNICY WHERE ID_ZESP = 20;


SELECT TO_CHAR(CURRENT_TIMESTAMP,'DAY') FROM PRACOWNICY;


--9
SELECT NAZWA,ADRES,
CASE ADRES
    WHEN 'PIOTROWO 3A'  THEN 'NOWE MIASTO'
    WHEN 'STRZELECKA 14'  THEN 'STARE MIASTO'
    WHEN 'WLODKOWICA 16' THEN 'GRUNWALD'
    WHEN 'MIELZYNSKIEGO 30' THEN 'STARE MIASTO'
    ELSE 'FO' END
FROM ZESPOLY;

--10
SELECT NAZWISKO,PLACA_POD,
CASE 
WHEN PLACA_POD > 480 THEN 'IS BIGGER THEN 408'
WHEN PLACA_POD = 480 THEN 'IS EQUAL 408'
WHEN PLACA_POD < 480 THEN 'IS LESS THEN 408'
END
FROM PRACOWNICY;

--11
SELECT NAZWISKO,
       PLACA_POD,
       DECODE(SIGN(PLACA_POD - 480),
              1, 'IS BIGGER THAN 480',
              0, 'IS EQUAL TO 480',
             -1, 'IS LESS THAN 480') AS comparison_result
FROM PRACOWNICY;

##################################funkcje grupowe################################################################################################


--1--
SELECT MIN(PLACA_POD) AS MINI,
       MAX(PLACA_POD) AS MAXI,
       MAX(PLACA_POD) - MIN(PLACA_POD) AS DIFFERENCE
FROM PRACOWNICY;

--2
SELECT ETAT,AVG(PLACA_POD) FROM PRACOWNICY GROUP BY ETAT;

--3 
SELECT COUNT(ETAT) FROM PRACOWNICY WHERE ETAT = 'PROFESOR';

--4 
SELECT ID_ZESP, SUM(PLACA_POD)+SUM(PLACA_DOD) FROM PRACOWNICY GROUP BY ID_ZESP;

--5
SELECT MAX(SUM(PLACA_POD)+SUM(PLACA_DOD)) AS MAX FROM PRACOWNICY GROUP BY ID_ZESP;

--6 
SELECT ID_SZEFA,MIN(PLACA_POD) FROM PRACOWNICY WHERE ID_SZEFA IS NOT NULL GROUP BY ID_SZEFA ORDER BY MIN(PLACA_POD) DESC;

--7
SELECT ID_ZESP,COUNT(*) FROM PRACOWNICY GROUP BY ID_ZESP ORDER BY COUNT(*) DESC;

--8
SELECT ID_ZESP,COUNT(*) FROM PRACOWNICY GROUP BY ID_ZESP HAVING COUNT(*)>3 ORDER BY COUNT(*) DESC;

--9
SELECT ID_ZESP,COUNT(UNIQUE ID_PRAC) FROM PRACOWNICY 
GROUP BY ID_ZESP 
HAVING COUNT(*)>3
ORDER BY COUNT(*) DESC;

--10 
SELECT ETAT, AVG(PLACA_POD), COUNT(ETAT) FROM PRACOWNICY 
WHERE ZATRUDNIONY < '1990-01-01'
GROUP BY ETAT;

--11
SELECT ID_ZESP, ETAT, AVG(PLACA_POD+NVL(PLACA_DOD,0))  AS SREDNIA, MAX(PLACA_POD+NVL(PLACA_DOD,0)) AS MAKSYMALNA
FROM PRACOWNICY
WHERE ETAT IN ('PROFESOR', 'ASYSTENT')
GROUP BY ID_ZESP, ETAT
ORDER BY ID_ZESP, ETAT;


--12
SELECT TO_CHAR(ZATRUDNIONY,'YYYY'),COUNT(*) 
FROM PRACOWNICY
GROUP BY TO_CHAR(ZATRUDNIONY,'YYYY')
ORDER BY TO_CHAR(ZATRUDNIONY,'YYYY');

--13
SELECT LENGTH(NAZWISKO),COUNT(*)  FROM PRACOWNICY
GROUP BY LENGTH(NAZWISKO) 
ORDER BY LENGTH(NAZWISKO);

--14

SELECT COUNT(*) FROM PRACOWNICY
WHERE NAZWISKO LIKE '%A%';


--15
SELECT 
    SUM(CASE WHEN NAZWISKO LIKE '%A%' THEN 1 ELSE 0 END) AS count_a,
    SUM(CASE WHEN NAZWISKO LIKE '%E%' THEN 1 ELSE 0 END) AS count_b
FROM PRACOWNICY;

--16
SELECT ID_ZESP , SUM(PLACA_POD), LISTAGG(NAZWISKO|| ':' ||PLACA_POD,',')
FROM PRACOWNICY 
GROUP BY ID_ZESP;





#################################Podstawy połączeń###############################################################################################


--1
SELECT NAZWISKO,ETAT, Z.ID_ZESP,Z.NAZWA 
FROM PRACOWNICY P INNER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
ORDER BY NAZWISKO;

--2
SELECT NAZWISKO,ETAT, Z.ID_ZESP,Z.NAZWA 
FROM PRACOWNICY P INNER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
WHERE Z.ADRES = 'PIOTROWO 3A'
ORDER BY NAZWISKO;

--3
SELECT NAZWISKO,ETAT,P.PLACA_POD,E.PLACA_MIN,E.PLACA_MAX
FROM PRACOWNICY P INNER JOIN ETATY E ON P.ETAT = E.NAZWA
ORDER BY ETAT, NAZWISKO;


--4
SELECT NAZWISKO,ETAT,P.PLACA_POD,E.PLACA_MIN,E.PLACA_MAX, CASE 
WHEN P.PLACA_POD<=E.PLACA_MAX AND P.PLACA_POD<=E.PLACA_MAX THEN 'OK'
WHEN P.PLACA_POD>E.PLACA_MAX OR P.PLACA_POD>E.PLACA_MAX THEN 'NOT'

END 
FROM PRACOWNICY P INNER JOIN ETATY E ON P.ETAT = E.NAZWA
ORDER BY ETAT, NAZWISKO;

--5
-- IDONT

--6
SELECT 
    P.NAZWISKO, 
    P.PLACA_POD, 
    P.ETAT,
    E.NAZWA,
    E.PLACA_MIN, 
    E.PLACA_MAX
FROM 
    PRACOWNICY P JOIN ETATY E ON P.PLACA_POD BETWEEN E.PLACA_MIN AND E.PLACA_MAX
ORDER BY 
    P.NAZWISKO;


--7
SELECT 
    P.NAZWISKO, 
    P.PLACA_POD, 
    P.ETAT,
    E.NAZWA,
    E.PLACA_MIN, 
    E.PLACA_MAX
FROM 
    PRACOWNICY P JOIN ETATY E ON P.PLACA_POD BETWEEN E.PLACA_MIN AND E.PLACA_MAX
WHERE E.NAZWA='SEKRETARKA'
ORDER BY 
    P.NAZWISKO;

--8 

SELECT P.NAZWISKO,P.ID_PRAC, S.NAZWISKO AS ID_SZEF, S.ID_PRAC AS SZEF
FROM
PRACOWNICY P JOIN PRACOWNICY S ON P.ID_SZEFA = S.ID_PRAC 
ORDER BY P.NAZWISKO;


--9

SELECT P.NAZWISKO,TO_CHAR(P.ZATRUDNIONY,'YYYY.MM.DD') AS PRAC_ZATRUDNIONY, S.NAZWISKO AS SZEF,
TO_CHAR(S.ZATRUDNIONY,'YYYY.MM.DD') AS SZEF_ZATRUDNIONY , FLOOR((P.ZATRUDNIONY - S.ZATRUDNIONY)/365) AS DIFFERENCE_YEARS
FROM
PRACOWNICY P JOIN PRACOWNICY S ON P.ID_SZEFA = S.ID_PRAC
WHERE  FLOOR((P.ZATRUDNIONY - S.ZATRUDNIONY)/365) <10
ORDER BY P.ZATRUDNIONY, S.ZATRUDNIONY, P.NAZWISKO;

--10
SELECT 
    Z.NAZWA,
    COUNT(*),
    AVG(P.PLACA_POD)
FROM 
    PRACOWNICY P JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
GROUP BY Z.NAZWA
ORDER BY Z.NAZWA;

--11 
SELECT 
    Z.NAZWA,
    CASE 
        WHEN COUNT(*)<=2 THEN 'MALY'
        WHEN COUNT(*) BETWEEN 3 AND 6 THEN 'SREDNI'
        WHEN COUNT(*) >= 7 THEN 'DUZY'
END
FROM 
    PRACOWNICY P JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
GROUP BY Z.NAZWA
ORDER BY Z.NAZWA;


#################################Połączenia zaawansowane. Operatory zbiorowe###############################################################################################

INSERT INTO pracownicy(id_prac, nazwisko)
VALUES ((SELECT max(id_prac) + 1 FROM pracownicy), 'WOLNY');



--1--

SELECT NAZWISKO, Z.ID_ZESP,Z.NAZWA 
FROM PRACOWNICY P LEFT OUTER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
ORDER BY NAZWISKO;


--2
SELECT Z.NAZWA , Z.ID_ZESP,
CASE 
    WHEN P.NAZWISKO IS NULL THEN 'BRAK'
    ELSE P.NAZWISKO
END
FROM ZESPOLY Z LEFT OUTER JOIN PRACOWNICY P ON P.ID_ZESP = Z.ID_ZESP
ORDER BY Z.NAZWA,P.NAZWISKO;


--3

SELECT CASE 
WHEN Z.NAZWA IS NULL THEN 'BRAK ZEPOLU'
ELSE Z.NAZWA
END,
CASE 
    WHEN P.NAZWISKO IS NULL THEN 'WOLNY'
    ELSE P.NAZWISKO
END
FROM PRACOWNICY P LEFT OUTER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
ORDER BY Z.NAZWA,P.NAZWISKO;

DELETE FROM pracownicy
WHERE nazwisko = 'WOLNY';
--4

SELECT Z.NAZWA,COUNT(P.NAZWISKO),SUM(P.PLACA_POD)
FROM PRACOWNICY P RIGHT OUTER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
GROUP BY Z.NAZWA;


--5
SELECT Z.NAZWA
FROM PRACOWNICY P RIGHT OUTER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
GROUP BY Z.NAZWA
HAVING COUNT(P.NAZWISKO)=0;

--6
SELECT P.NAZWISKO,P.ID_PRAC, S.NAZWISKO AS ID_SZEF, S.ID_PRAC AS SZEF
FROM
PRACOWNICY P LEFT OUTER JOIN PRACOWNICY S ON P.ID_SZEFA = S.ID_PRAC 
ORDER BY P.NAZWISKO;


--7 
SELECT S.NAZWISKO,COUNT(P.NAZWISKO)
END
FROM
PRACOWNICY S LEFT JOIN PRACOWNICY P ON S.ID_PRAC = P.ID_SZEFA
GROUP BY S.NAZWISKO
ORDER BY S.NAZWISKO;


--8

SELECT P.NAZWISKO,P.ETAT,P.PLACA_POD, Z.NAZWA ,S.NAZWISKO AS SZEF
FROM
PRACOWNICY P LEFT OUTER JOIN PRACOWNICY S ON P.ID_SZEFA = S.ID_PRAC  
LEFT OUTER JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
ORDER BY P.NAZWISKO;

--9
SELECT P.NAZWISKO, Z.NAZWA
FROM
PRACOWNICY P CROSS JOIN ZESPOLY Z
ORDER BY P.NAZWISKO;

--10

SELECT COUNT(*)
FROM
ETATY E CROSS JOIN PRACOWNICY P CROSS JOIN ZESPOLY Z;

--11

SELECT ETAT FROM PRACOWNICY P
WHERE EXTRACT(YEAR FROM ZATRUDNIONY) = 1992
    UNION
SELECT ETAT FROM PRACOWNICY P
WHERE EXTRACT(YEAR FROM ZATRUDNIONY) = 1993;


--12 
SELECT DISTINCT ID_ZESP FROM ZESPOLY 
    EXCEPT
SELECT DISTINCT ID_ZESP FROM PRACOWNICY ;


--13
SELECT Z.ID_ZESP, Z.NAZWA 
FROM ZESPOLY Z
LEFT JOIN PRACOWNICY P ON Z.ID_ZESP = P.ID_ZESP
WHERE P.ID_ZESP IS NULL;


--14

SELECT NAZWISKO, PLACA_POD,'Poniżej 480 złotych' FROM PRACOWNICY
WHERE PLACA_POD <480 
    UNION 
SELECT NAZWISKO, PLACA_POD,'Powyżej 480 złotych' FROM PRACOWNICY
WHERE PLACA_POD >480
    UNION 
SELECT NAZWISKO, PLACA_POD,'Dokladnie 480 złotych' FROM PRACOWNICY
WHERE PLACA_POD >480;



#############################################################################Podstawy podzapytań###########



--1
SELECT NAZWISKO,ETAT , ID_ZESP  FROM PRACOWNICY
WHERE  ID_ZESP=
(SELECT ID_ZESP FROM PRACOWNICY WHERE NAZWISKO = 'BRZEZINSKI' )
ORDER BY NAZWISKO;

--2
SELECT NAZWISKO,ETAT,Z.NAZWA FROM 
PRACOWNICY P JOIN ZESPOLY Z ON P.ID_ZESP = Z.ID_ZESP
WHERE  P.ID_ZESP =
(SELECT ID_ZESP FROM PRACOWNICY WHERE NAZWISKO = 'BRZEZINSKI' )
ORDER BY NAZWISKO;


--3 
INSERT INTO pracownicy(id_prac, nazwisko, etat, zatrudniony)
VALUES ((SELECT max(id_prac) + 1 FROM pracownicy),
'WOLNY', 'ASYSTENT', DATE '1968-07-01');


SELECT NAZWISKO,ETAT,ZATRUDNIONY FROM 
PRACOWNICY 
WHERE  ETAT = 'PROFESOR' AND ZATRUDNIONY =
(SELECT MIN(ZATRUDNIONY) FROM PRACOWNICY
WHERE ETAT = 'PROFESOR')
ORDER BY NAZWISKO;


--4
SELECT NAZWISKO,ZATRUDNIONY,ID_ZESP FROM 
PRACOWNICY 
WHERE  ZATRUDNIONY IN
(SELECT MAX(ZATRUDNIONY) FROM PRACOWNICY
GROUP BY ID_ZESP
HAVING ID_ZESP IS NOT NULL)
ORDER BY ZATRUDNIONY;


--5

SELECT Z.ID_ZESP,NAZWA FROM ZESPOLY Z
LEFT OUTER JOIN PRACOWNICY P ON Z.ID_ZESP = P.ID_ZESP
WHERE P.ID_PRAC IS NULL;



DELETE FROM pracownicy
WHERE nazwisko = 'WOLNY';

--6

SELECT 
S.NAZWISKO
FROM PRACOWNICY S JOIN PRACOWNICY P ON S.ID_PRAC = P.ID_SZEFA
WHERE S.ETAT = 'PROFESOR' AND P.NAZWISKO IN
(SELECT NAZWISKO FROM PRACOWNICY
WHERE NOT ETAT = 'ASYSTENT');

--7 
SELECT ID_ZESP, SUM(PLACA_POD) AS SUMA_PLAC FROM PRACOWNICY 
GROUP BY ID_ZESP 
HAVING SUM(PLACA_POD) = 
(SELECT MAX(SUM(PLACA_POD)) FROM PRACOWNICY
GROUP BY ID_ZESP);


--8
SELECT Z.NAZWA, SUM(PLACA_POD) AS SUMA_PLAC FROM PRACOWNICY P 
JOIN  ZESPOLY Z USING(ID_ZESP)
GROUP BY Z.NAZWA 
HAVING  SUM(PLACA_POD) = 
(SELECT MAX(SUM(PLACA_POD)) FROM PRACOWNICY
GROUP BY ID_ZESP);


--9
SELECT Z.NAZWA, COUNT(*) AS COUNT_PRAC FROM PRACOWNICY P 
JOIN  ZESPOLY Z USING(ID_ZESP)
GROUP BY Z.NAZWA 
HAVING  COUNT(*) 
>
(SELECT COUNT(*) FROM PRACOWNICY P
JOIN  ZESPOLY Z USING(ID_ZESP)
WHERE Z.NAZWA  = 'ADMINISTRACJA');

--10
SELECT ETAT FROM PRACOWNICY
GROUP BY ETAT
HAVING COUNT(*) >=
(SELECT MAX(COUNT(*)) FROM PRACOWNICY
GROUP BY ETAT);

--11
SELECT ETAT, LISTAGG(NAZWISKO,',') FROM PRACOWNICY
GROUP BY ETAT
HAVING COUNT(*) >=
(SELECT MAX(COUNT(*)) FROM PRACOWNICY
GROUP BY ETAT);

--12
SELECT S.NAZWISKO AS SZEF,P.NAZWISKO AS PRACOWNIK,ABS(P.PLACA_POD-S.PLACA_POD) AS ROZNICA FROM PRACOWNICY P
JOIN PRACOWNICY S ON S.ID_PRAC = P.ID_SZEFA
ORDER BY ROZNICA
FETCH FIRST 1 ROWS ONLY;


#############################################################################Podzapytania zaawansowane###########

SELECT
    *
FROM
    ZESPOLY
WHERE
    ID_ZESP NOT IN (
        SELECT
            ID_ZESP
        FROM
            PRACOWNICY
    );
--2
SELECT
    NAZWISKO,
    PLACA_POD,
    ETAT
FROM
    PRACOWNICY P
WHERE
    PLACA_POD > (
        SELECT
            AVG(PLACA_POD)
        FROM
            PRACOWNICY
        WHERE
            ETAT = P.ETAT
        GROUP BY
            ETAT
    )
ORDER BY
    P.PLACA_POD DESC;
--3
SELECT
    NAZWISKO,
    PLACA_POD
FROM
    PRACOWNICY P
WHERE
    PLACA_POD > (
        SELECT
            0.75 * PLACA_POD
        FROM
            PRACOWNICY
        WHERE
            ID_PRAC = P.ID_SZEFA
    );
--4
SELECT
    NAZWISKO
FROM
    PRACOWNICY P
WHERE
        ETAT = 'PROFESOR'
    AND NOT EXISTS (
        SELECT
            ID_SZEFA,
            ETAT
        FROM
            PRACOWNICY
        WHERE
                ETAT = 'STAZYSTA'
            AND P.ID_PRAC = ID_SZEFA
    );
--5
SELECT
    Z.NAZWA,
    M.MAKS_SUMA_PLAC
FROM
         (
        SELECT
            MAX(SUM(PLACA_POD)) AS MAKS_SUMA_PLAC
        FROM
            PRACOWNICY
        GROUP BY
            ID_ZESP
    ) M
    JOIN (
        SELECT
            ID_ZESP,
            SUM(PLACA_POD) AS SUMA_PLAC
        FROM
            PRACOWNICY
        GROUP BY
            ID_ZESP
    )       S ON S.SUMA_PLAC = M.MAKS_SUMA_PLAC
    JOIN ZESPOLY Z ON Z.ID_ZESP = S.ID_ZESP;
--6
SELECT
    NAZWISKO,
    PLACA_POD
FROM
    PRACOWNICY P
WHERE
    (
        SELECT
            COUNT(*)
        FROM
            PRACOWNICY PP
        WHERE
            PP.PLACA_POD >= P.PLACA_POD
    ) <= 3
ORDER BY
    P.PLACA_POD DESC;
--7
SELECT
    NAZWISKO,
    PLACA_POD,
    PLACA_POD - (
        SELECT
            AVG(PLACA_POD)
        FROM
            PRACOWNICY
        WHERE
            ID_ZESP = P.ID_ZESP
    ) AS S
FROM
    PRACOWNICY P
ORDER BY
    NAZWISKO;
--8
SELECT
    NAZWISKO,
    PLACA_POD,
    PLACA_POD - (
        SELECT
            AVG(PLACA_POD)
        FROM
            PRACOWNICY
        WHERE
            ID_ZESP = P.ID_ZESP
    ) AS S
FROM
    PRACOWNICY P
WHERE
    PLACA_POD > (
        SELECT
            AVG(PLACA_POD)
        FROM
            PRACOWNICY
        WHERE
            ID_ZESP = P.ID_ZESP
    )
ORDER BY
    NAZWISKO;
--9
SELECT NAZWISKO, (SELECT COUNT(ID_PRAC) FROM PRACOWNICY P WHERE P.ID_SZEFA = S.ID_PRAC) FROM PRACOWNICY S WHERE S.ID_ZESP = (SELECT ID_ZESP FROM ZESPOLY ZWHERE Z.ID_ZESP = S.ID_ZESP AND Z.ADRES LIKE '%PIOTROWO%') AND S.ETAT ='PROFESOR' ;
--10
SELECT
    NAZWA,
    (
        SELECT
            AVG(PLACA_POD)
        FROM
            PRACOWNICY P
        WHERE
            P.ID_ZESP = Z.ID_ZESP
    ),
    (
        SELECT
            ROUND(AVG(PLACA_POD))
        FROM
            PRACOWNICY
    )
FROM
    ZESPOLY Z;
--11
SELECT
    ETAT,
    (
        SELECT
            MIN(PLACA_POD)
        FROM
            PRACOWNICY PP
        WHERE
            PP.ETAT = P.ETAT
    ),
    (
        SELECT
            MAX(PLACA_POD)
        FROM
            PRACOWNICY PP
        WHERE
            PP.ETAT = P.ETAT
    )
FROM
    PRACOWNICY P
GROUP BY
    P.ETAT
ORDER BY
    (
        SELECT
            COUNT(*)
        FROM
            PRACOWNICY PP
        WHERE
            PP.ETAT = P.ETAT
    ) DESC,
    P.ETAT ASC;



##########################################################################Zaawansowane mechanizmy w zapytaniach ################################
--1
SELECT NAZWISKO,PLACA_POD FROM PRACOWNICY 
ORDER BY PLACA_POD DESC
FETCH FIRST 3 ROW ONLY;


SELECT * FROM 
(SELECT NAZWISKO,PLACA_POD FROM PRACOWNICY 
ORDER BY PLACA_POD DESC)
WHERE ROWNUM <=3;


--2 
SELECT NAZWISKO,PLACA_POD FROM PRACOWNICY 
ORDER BY PLACA_POD DESC
OFFSET 5 ROW
FETCH NEXT 5 ROWS WITH TIES;


SELECT * FROM 
((SELECT ROWNUM AS ROW_N,NAZWISKO,PLACA_POD FROM
(SELECT NAZWISKO,PLACA_POD FROM PRACOWNICY
ORDER BY PLACA_POD DESC)))
WHERE ROW_N BETWEEN 6 AND 10;



--3
WITH P_AVG(AVG_VALUE,P_ID_ZESP) AS
(SELECT AVG(PLACA_POD),ID_ZESP FROM PRACOWNICY
GROUP BY ID_ZESP)  
SELECT NAZWISKO,ID_ZESP,PLACA_POD,PLACA_POD-AVG_VALUE AS ROZNICA,AVG_VALUE,P_ID_ZESP  FROM PRACOWNICY , P_AVG 
WHERE PRACOWNICY.ID_ZESP = P_AVG.P_ID_ZESP AND PLACA_POD > PLACA_POD-AVG_VALUE AND PLACA_POD-AVG_VALUE > 0;


--4 


WITH LATA(AMOUNT,ROK) AS 
(SELECT COUNT(*),EXTRACT(YEAR FROM ZATRUDNIONY) AS YEAR_M FROM PRACOWNICY
GROUP BY ZATRUDNIONY)
SELECT ROK, COUNT(*) FROM LATA 
GROUP BY ROK;



--5 
WITH LATA(AMOUNT,ROK) AS 
(SELECT COUNT(*),EXTRACT(YEAR FROM ZATRUDNIONY) AS YEAR_M FROM PRACOWNICY
GROUP BY ZATRUDNIONY)
SELECT ROK, COUNT(*) FROM LATA 
GROUP BY ROK  
ORDER BY COUNT(*) DESC
FETCH FIRST 1 ROW ONLY
;


--6 
WITH ASYSTENCI AS 
(SELECT NAZWISKO,ID_ZESP FROM PRACOWNICY
WHERE ETAT = 'ASYSTENT'
UNION ALL
SELECT NAZWA,ID_ZESP FROM ZESPOLY 
WHERE NAZWA = 'PIOTROWO 3A')
SELECT * FROM ASYSTENCI;

--7
WITH SUM_BY_GROUP AS
    (SELECT ID_ZESP,SUM(PLACA_POD) AS PLACA FROM PRACOWNICY
    GROUP BY ID_ZESP)  

SELECT PLACA,NAZWA FROM SUM_BY_GROUP SU
JOIN ZESPOLY Z ON SU.ID_ZESP = Z.ID_ZESP
ORDER BY PLACA DESC
FETCH FIRST 1 ROW ONLY
;

--8
SELECT
    NAZWISKO,LEVEL AS POZIOM
FROM PRACOWNICY
CONNECT BY ID_SZEFA =  PRIOR ID_PRAC
START WITH NAZWISKO = 'BRZEZINSKI'
ORDER SIBLINGS BY NAZWISKO;
WITH SUM_BY_GROUP AS
    (SELECT ID_ZESP,SUM(PLACA_POD) AS PLACA FROM PRACOWNICY
    GROUP BY ID_ZESP)  

SELECT PLACA,NAZWA FROM SUM_BY_GROUP SU
JOIN ZESPOLY Z ON SU.ID_ZESP = Z.ID_ZESP
ORDER BY PLACA DESC
FETCH FIRST 1 ROW ONLY
;

--9
SELECT
    RPAD('#', LEVEL)||NAZWISKO,LEVEL AS POZIOM
FROM PRACOWNICY
CONNECT BY ID_SZEFA =  PRIOR ID_PRAC
START WITH NAZWISKO = 'BRZEZINSKI'
ORDER SIBLINGS BY NAZWISKO;
WITH SUM_BY_GROUP AS
    (SELECT ID_ZESP,SUM(PLACA_POD) AS PLACA FROM PRACOWNICY
    GROUP BY ID_ZESP)  

SELECT PLACA,NAZWA FROM SUM_BY_GROUP SU
JOIN ZESPOLY Z ON SU.ID_ZESP = Z.ID_ZESP
ORDER BY PLACA DESC
FETCH FIRST 1 ROW ONLY
;

--10
SELECT NAZWISKO || ' ZAROBKI W ZYS: ',decode(FLOOR(PLACA_POD/1000),0,'ZERO', 1,'ONE', 2,'TWO', 3,'THREE')  FROM PRACOWNICY;





###############################################Język manipulowania danymi (DML)######################################################

--#1
INSERT INTO PRACOWNICY (ID_PRAC, NAZWISKO, ETAT, ZATRUDNIONY, PLACA_POD, PLACA_DOD, ID_ZESP)
VALUES
  (250, 'KOWALSKI', 'ASYSTENT', '2015-01-13', 1500, NULL ,10);

INSERT INTO PRACOWNICY (ID_PRAC, NAZWISKO, ETAT, ZATRUDNIONY, PLACA_POD, PLACA_DOD, ID_ZESP)
VALUES  
  (260, 'ADAMSKI', 'ASYSTENT', '2014-09-10', 1500,NULL ,10);


INSERT INTO PRACOWNICY (ID_PRAC, NAZWISKO, ETAT, ZATRUDNIONY, PLACA_POD, PLACA_DOD, ID_ZESP)
VALUES
  (270, 'NOWAK', 'ADIUNKT', '1990-05-01', 2050, 540, 20);



--2

UPDATE PRACOWNICY
SET
  PLACA_POD = PLACA_POD * 1.1,
  PLACA_DOD = CASE
    WHEN PLACA_DOD IS NULL THEN 100
    ELSE PLACA_DOD * 1.2
END;


SELECT * FROM PRACOWNICY
WHERE ID_PRAC IN (250,260,270);


--3
INSERT INTO ZESPOLY
VALUES (60,'BAZY DANYCH','PIOTROWO 2');


SELECT * FROM ZESPOLY
WHERE ID_ZESP = 60;



--4

UPDATE PRACOWNICY
SET
  ID_ZESP = 60
WHERE ID_PRAC IN (250,260,270);


SELECT * FROM PRACOWNICY
WHERE ID_PRAC IN (250,260,270);



--5
UPDATE PRACOWNICY
SET
  ID_SZEFA = 140
WHERE ID_ZESP = 60;

SELECT * FROM PRACOWNICY
WHERE ID_SZEFA = 140;


--6
DELETE FROM ZESPOLY
WHERE NAZWA = 'BAZY DANYCH';


--7
DELETE FROM PRACOWNICY
WHERE ID_ZESP = 60;

DELETE FROM ZESPOLY
WHERE NAZWA = 'BAZY DANYCH';


--8

SELECT NAZWISKO,PLACA_POD,0.1* (SELECT AVG(P.PLACA_POD) FROM PRACOWNICY P WHERE P.ID_ZESP = ZES.ID_ZESP) AS PODWYSZKA FROM PRACOWNICY ZES

--9 

UPDATE PRACOWNICY PP
SET PLACA_POD = PLACA_POD + 0.1* (
    SELECT AVG(P.PLACA_POD)
    FROM PRACOWNICY P
    WHERE P.ID_ZESP = PP.ID_ZESP
);


--10 

SELECT * FROM PRACOWNICY P WHERE P.PLACA_POD = (SELECT MIN(PLACA_POD) FROM PRACOWNICY);  


--11 

UPDATE PRACOWNICY PP
SET PLACA_POD = (SELECT AVG(PLACA_POD)
    FROM PRACOWNICY)
WHERE PLACA_POD = (SELECT MIN(PLACA_POD)
    FROM PRACOWNICY);


--12 

UPDATE PRACOWNICY P
SET PLACA_DOD = (SELECT AVG(PLACA_POD)
    FROM PRACOWNICY)
WHERE ID_ZESP = 20 AND
    ID_PRAC IN (SELECT ID_PRAC
    FROM PRACOWNICY WHERE ID_SZEFA = 140);






##########################################Język definiowania danych (DDL), część 1.##################################################

--1
CREATE TABLE PROJEKTY (
    ID_PROJEKTU      NUMBER(4)
        GENERATED ALWAYS AS IDENTITY,
    OPIS_PROJEKTU    VARCHAR2(20),
    DATA_ROZPOCZECIA DATE DEFAULT CURRENT_DATE,
    DATA_ZAKONCZENIA DATE,
    FUNDUSZE         NUMBER(7, 2)
);

--2
INSERT INTO PROJEKTY (
    OPIS_PROJEKTU,
    DATA_ROZPOCZECIA,
    DATA_ZAKONCZENIA,
    FUNDUSZE
) VALUES (
    'INDEKSY BITMAPOWE',
    TO_DATE('02-04-1999', 'DD-MM-YYYY'),
    TO_DATE('31-08-2001', 'DD-MM-YYYY'),
    25000
);

INSERT INTO PROJEKTY (
    OPIS_PROJEKTU,
    DATA_ZAKONCZENIA,
    FUNDUSZE
) VALUES (
    'SIECI KREGOSLUPOWE',
    NULL,
    19000
);

--3
SELECT
    ID_PROJEKTU,
    OPIS_PROJEKTU
FROM
    PROJEKTY;

--4
INSERT INTO PROJEKTY (
    ID_PROJEKTU,
    OPIS_PROJEKTU,
    DATA_ROZPOCZECIA,
    DATA_ZAKONCZENIA,
    FUNDUSZE
) VALUES (
    10,
    'INDEKSY DRZEWIASTE',
    TO_DATE('24-12-2013', 'DD-MM-YYYY'),
    TO_DATE('01-01-2014', 'DD-MM-YYYY'),
    1200
);

INSERT INTO PROJEKTY (
    OPIS_PROJEKTU,
    DATA_ROZPOCZECIA,
    DATA_ZAKONCZENIA,
    FUNDUSZE
) VALUES (
    'INDEKSY DRZEWIASTE',
    TO_DATE('24-12-2013', 'DD-MM-YYYY'),
    TO_DATE('01-01-2014', 'DD-MM-YYYY'),
    1200
);

--5
UPDATE PROJEKTY
SET
    ID_PROJEKTU = 10
WHERE
    OPIS_PROJEKTU = 'INDEKSY DRZEWIASTE';

--6
CREATE TABLE PROJEKTY_KOPIA
    AS
        (
            SELECT
                *
            FROM
                PROJEKTY
        );

--7
INSERT INTO PROJEKTY_KOPIA (
    ID_PROJEKTU,
    OPIS_PROJEKTU,
    DATA_ROZPOCZECIA,
    DATA_ZAKONCZENIA,
    FUNDUSZE
) VALUES (
    10,
    'SIECI_LOKALNE',
    CURRENT_DATE,
    CURRENT_DATE + INTERVAL '1' YEAR,
    24500
);

--8
DELETE FROM PROJEKTY
WHERE
    OPIS_PROJEKTU = 'INDEKSY DRZEWIASTE';
--nie

--9
SELECT
    TABLE_NAME
FROM
    USER_TABLES;



##########################################Język definiowania danych (DDL), część 2.##################################################





################################################Perspektywy#########################################################################